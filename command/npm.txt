#############################################
###############    npm 使用    ###############
#############################################

----------------------------------------------
建立初始專案 (產生 package.json 檔)

npm init -y

----------------------------------------------
安裝套件 (產生 package-lock.json、node_modules)

npm install

----------------------------------------------
安裝套件

npm install [package] --save
npm install [package] --save-dev

移除套件
npm uninstall [package]

----------------------------------------------
npm start
npm run develop
npm run build

----------------------------------------------

#############################################
###############    yarn 使用    ##############
#############################################

----------------------------------------------
建立初始專案
(產生 package.json 檔)

yarn init -y

----------------------------------------------
安裝套件
(有下面兩種寫法)
(會產生 node_modules)
(會產生 yarn.lock 取代 package-lock.json)

yarn
yarn install

----------------------------------------------
安裝套件
yarn add [package]
yarn add [package] --dev

移除套件
yarn remove [package]

----------------------------------------------
yarn start
yarn run develop
yarn run build

不一定要用上方語法跑 script，也可用 npm，效果相同

----------------------------------------------
yarn 的優點在於會把 node 套件存在一個 global cache
所以不用每次都要從網路上載下一大堆套件
對於套件的相依性也有比較好的管理

----------------------------------------------
npx 為 node.js 的一個內建的 CLI 工具
可以臨時的安裝非全域性的必要套件
省下許多安裝及使用的流程步驟、省下磁碟空間
也避免長期污染，下面為範例：

npx create-react-app my-react
yarn create-react-app my-react
npx express my-express

----------------------------------------------

#############################################
###############    nvm 使用    ###############
#############################################

nvm 可切換不同的 node 版本

nvm ls                列出可用的 node 版本
nvm install v18.7.0   安裝 node v18.7.0
nvm uninstall v18.7.0 解除安裝 node v18.7.0
nvm use v18.7.0       使用 node v18.7.0
nvm use               使用 .nvmrc 檔案內指定的版本 (e.g. v18)

